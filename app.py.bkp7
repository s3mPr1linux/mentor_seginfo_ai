from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import openai
import os
from dotenv import load_dotenv
import logging

# Carrega variáveis de ambiente do .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

app = Flask(__name__, static_url_path='/static')
CORS(app)

# Configuração de logging estruturado simples
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_message = data.get("message")

    if not user_message:
        return jsonify({"error": "Mensagem não fornecida"}), 400

    try:
        logging.info(f"Pergunta recebida: {user_message}")

        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Você é um mentor de Segurança da Informação, experiente e acessível. Ajude iniciantes com dicas, exemplos e clareza."},
                {"role": "user", "content": user_message}
            ]
        )

        reply = response.choices[0].message.content
        logging.info(f"Resposta gerada: {reply}")
        return jsonify({"reply": reply})

    except openai.AuthenticationError:
        logging.error("Chave de API inválida.")
        return jsonify({"error": "Chave de API inválida."}), 401

    except openai.RateLimitError:
        logging.warning("Limite da API excedido.")
        return jsonify({"error": "Limite da API excedido. Tente novamente mais tarde."}), 429

    except Exception as e:
        logging.error(f"Erro interno: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    # Deixa acessível na rede local (LAN)
    app.run(host="0.0.0.0", port=5000, debug=True)

